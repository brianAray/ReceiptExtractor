import { MindeeError } from "../errors";
import { StringDict } from "../parsing/common";
import { EndpointResponse } from "./endpoint";
export declare function handleError(url: string, response: EndpointResponse, code?: number, serverError?: string): void;
/**
 * `Error` wrapper for server (HTTP) errors.
 * Is used when an error is lacking a handled error code.
 */
export declare class MindeeHttpError extends MindeeError {
    /** Description of the error. */
    message: string;
    /** Additional details on the error. */
    details: string | StringDict;
    /** Standard HTTP error code. */
    code?: number;
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Generic client errors.
 * Can include errors like InvalidQuery.
 */
export declare class MindeeHttp400Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Can include errors like NoTokenSet or InvalidToken.
 */
export declare class MindeeHttp401Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Regular AccessForbidden error.
 * Can also include errors like PlanLimitReached, AsyncRequestDisallowed or SyncRequestDisallowed.
 */
export declare class MindeeHttp403Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
export declare class MindeeHttp404Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Rare error.
 * Can occasionally happen when unusually large documents are passed.
 */
export declare class MindeeHttp413Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Usually corresponds to TooManyRequests errors.
 * Arises whenever too many calls to the API are made in quick succession.
 */
export declare class MindeeHttp429Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Generic server errors.
 */
export declare class MindeeHttp500Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
/**
 * Miscellaneous server errors.
 * Can include errors like RequestTimeout or GatewayTimeout.
 */
export declare class MindeeHttp504Error extends MindeeHttpError {
    constructor(httpError: StringDict, url: string, code?: number);
}
