/// <reference types="node" />
/// <reference types="node" />
import { RequestOptions } from "https";
import { InputSource } from "../input";
import { IncomingMessage, ClientRequest } from "http";
import { PageOptions } from "../input";
import { MindeeApi } from "./mindeeApi";
export interface EndpointResponse {
    messageObj: IncomingMessage;
    data: {
        [key: string]: any;
    };
}
/**
 * Endpoint object class wrapper.
 */
export declare class Endpoint {
    #private;
    /** URL of a product. */
    urlName: string;
    /** Account owning the product. */
    owner: string;
    /** Product's version, as a string. */
    version: string;
    /** Entire root of the URL for API calls. */
    urlRoot: string;
    /** Settings relating to the API. */
    settings: MindeeApi;
    constructor(urlName: string, owner: string, version: string, settings: MindeeApi);
    /**
     * Sends a prediction to the API and parses out the result.
     * Throws an error if the server's response contains one.
     * @param params parameters relating to prediction options.
     * @category Synchronous
     * @returns a `Promise` containing parsing results.
     */
    predict(params: {
        inputDoc: InputSource;
        includeWords: boolean;
        pageOptions?: PageOptions;
        cropper: boolean;
    }): Promise<EndpointResponse>;
    /**
     * Enqueues a prediction to the API.
     * Throws an error if the server's response contains one.
     * @param params parameters relating to prediction options.
     * @category Asynchronous
     * @returns a `Promise` containing queue data.
     */
    predictAsync(params: {
        inputDoc: InputSource;
        includeWords: boolean;
        pageOptions?: PageOptions;
        cropper: boolean;
    }): Promise<EndpointResponse>;
    /**
     * Requests the results of a queued document from the API.
     * Throws an error if the server's response contains one.
     * @param params parameters relating to prediction options.
     * @category Asynchronous
     * @returns a `Promise` containing the parsed result.
     */
    getQueuedDocument(queueId: string): Promise<EndpointResponse>;
    /**
     * Send a file to a prediction API.
     * @param input
     * @param predictUrl
     * @param includeWords
     * @param cropper
     */
    protected sendFileForPrediction(input: InputSource, predictUrl: string, includeWords?: boolean, cropper?: boolean): Promise<EndpointResponse>;
    /**
     * Reads a response from the API and processes it.
     * @param options options related to the request itself.
     * @param resolve the resolved response
     * @param reject promise rejection reason.
     * @returns the processed request.
     */
    protected readResponse(options: RequestOptions, resolve: (value: EndpointResponse | PromiseLike<EndpointResponse>) => void, reject: (reason?: any) => void): ClientRequest;
}
